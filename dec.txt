entity rc5_dec is
    Port ( clr : in  STD_LOGIC;
           clk : in  STD_LOGIC;
           din : in  STD_LOGIC_VECTOR (63 downto 0);
           di_vld : in  STD_LOGIC;
           dout : out  STD_LOGIC_VECTOR (63 downto 0);
           do_rdy : out  STD_LOGIC);
end rc5_dec;

architecture Behavioral of rc5_dec is
signal i_cnt: STD_logic_vector(3 downto 0);

SIGNAL b_reg: STD_LOGIC_VECTOR(31 DOWNTO 0); 
SIGNAL b: STD_LOGIC_VECTOR(31 DOWNTO 0); 
signal b_rot:std_logic_vector(31 DOWNTO 0);
signal b_xor:std_logic_vector(31 DOWNTO 0);

SIGNAL a_reg: STD_LOGIC_VECTOR(31 DOWNTO 0); 
SIGNAL a: STD_LOGIC_VECTOR(31 DOWNTO 0); 
signal a_rot:std_logic_vector(31 DOWNTO 0);
signal a_xor:std_logic_vector(31 DOWNTO 0);




type rom is ARRAY(0 TO 25) OF STD_LOGIC_VECTOR(31 DOWNTO 0);
CONSTANT skey : rom:=rom'( x"00000000", x"00000000", x"46F8E8C5", x"460C6085", x"70F83B8A",  x"284B8303",   
x"513E1454",  x"F621ED22", x"3125065D", x"11A83A5D", x"D427686B",  x"713AD82D",  x"4B792F99",  x"2799A4DD",  
x"A7901C49",  x"DEDE871A", x"36C03196",  x"A7EFC249",   x"61A78BB8",  x"3B0A1D2B", x"4DBFCA76", x"AE162167",  
x"30D76B0A",  x"43192304", x"F6CC1431",  x"65046380");

TYPE statetype is(st_idle, st_pre_round, st_round_op, st_aft_round, st_ready);
signal state:statetype;



begin
b<= b_reg-skey(CONV_INTEGER(i_cnt & '1'));
with a_reg(4 downto 0)select
b_rot<= b(30 downto 0)& b(31)when "11111",
	b(29 DOWNTO 0) & b(31 DOWNTO 30) WHEN "11110",
	b(28 DOWNTO 0) & b(31 DOWNTO 29) WHEN "11101",
	b(27 DOWNTO 0) & b(31 DOWNTO 28) WHEN "11100",
	b(26 DOWNTO 0) & b(31 DOWNTO 27) WHEN "11011",
	b(25 DOWNTO 0) & b(31 DOWNTO 26) WHEN "11010",
	b(24 DOWNTO 0) & b(31 DOWNTO 25) WHEN "11001",
	b(23 DOWNTO 0) & b(31 DOWNTO 24) WHEN "11000",
	b(22 DOWNTO 0) & b(31 DOWNTO 23) WHEN "10111",
	b(21 DOWNTO 0) & b(31 DOWNTO 22) WHEN "10110",
	b(20 DOWNTO 0) & b(31 DOWNTO 21) WHEN "10101",
	b(19 DOWNTO 0) & b(31 DOWNTO 20) WHEN "10100",
	b(18 DOWNTO 0) & b(31 DOWNTO 19) WHEN "10011",
	b(17 DOWNTO 0) & b(31 DOWNTO 18) WHEN "10010",
	b(16 DOWNTO 0) & b(31 DOWNTO 17) WHEN "10001",
	b(15 DOWNTO 0) & b(31 DOWNTO 16) WHEN "10000",
   b(14 DOWNTO 0) & b(31 DOWNTO 15) WHEN "01111",
	b(13 DOWNTO 0) & b(31 DOWNTO 14) WHEN "01110",
	b(12 DOWNTO 0) & b(31 DOWNTO 13) WHEN "01101",
	b(11 DOWNTO 0) & b(31 DOWNTO 12) WHEN "01100",
	b(10 DOWNTO 0) & b(31 DOWNTO 11) WHEN "01011",
	b(9 DOWNTO 0) & b(31 DOWNTO 10) WHEN "01010",
	b(8 DOWNTO 0) & b(31 DOWNTO 9) WHEN "01001",
	b(7 DOWNTO 0) & b(31 DOWNTO 8) WHEN "01000",
	b(6 DOWNTO 0) & b(31 DOWNTO 7) WHEN "00111",
	b(5 DOWNTO 0) & b(31 DOWNTO 6) WHEN "00110",
	b(4 DOWNTO 0) & b(31 DOWNTO 5) WHEN "00101",
	b(3 DOWNTO 0) & b(31 DOWNTO 4) WHEN "00100",
	b(2 DOWNTO 0) & b(31 DOWNTO 3) WHEN "00011",
	b(1 DOWNTO 0) & b(31 DOWNTO 2) WHEN "00010",
	b(0) & b(31 DOWNTO 1) WHEN "00001",
	b WHEN OTHERS;
b_xor<=b_rot XOR a_reg;

a<=a_reg-skey(CONV_INTEGER(i_cnt & '0'));
with b_xor(4 downto 0)select
a_rot<= a(30 downto 0)& a(31)when "11111",
	a(29 DOWNTO 0) & a(31 DOWNTO 30) WHEN "11110",
	a(28 DOWNTO 0) & a(31 DOWNTO 29) WHEN "11101",
	a(27 DOWNTO 0) & a(31 DOWNTO 28) WHEN "11100",
	a(26 DOWNTO 0) & a(31 DOWNTO 27) WHEN "11011",
	a(25 DOWNTO 0) & a(31 DOWNTO 26) WHEN "11010",
	a(24 DOWNTO 0) & a(31 DOWNTO 25) WHEN "11001",
	a(23 DOWNTO 0) & a(31 DOWNTO 24) WHEN "11000",
	a(22 DOWNTO 0) & a(31 DOWNTO 23) WHEN "10111",
	a(21 DOWNTO 0) & a(31 DOWNTO 22) WHEN "10110",
	a(20 DOWNTO 0) & a(31 DOWNTO 21) WHEN "10101",
	a(19 DOWNTO 0) & a(31 DOWNTO 20) WHEN "10100",
	a(18 DOWNTO 0) & a(31 DOWNTO 19) WHEN "10011",
	a(17 DOWNTO 0) & a(31 DOWNTO 18) WHEN "10010",
	a(16 DOWNTO 0) & a(31 DOWNTO 17) WHEN "10001",
	a(15 DOWNTO 0) & a(31 DOWNTO 16) WHEN "10000",
   a(14 DOWNTO 0) & a(31 DOWNTO 15) WHEN "01111",
	a(13 DOWNTO 0) & a(31 DOWNTO 14) WHEN "01110",
	a(12 DOWNTO 0) & a(31 DOWNTO 13) WHEN "01101",
	a(11 DOWNTO 0) & a(31 DOWNTO 12) WHEN "01100",
	a(10 DOWNTO 0) & a(31 DOWNTO 11) WHEN "01011",
	a(9 DOWNTO 0) & a(31 DOWNTO 10) WHEN "01010",
	a(8 DOWNTO 0) & a(31 DOWNTO 9) WHEN "01001",
	a(7 DOWNTO 0) & a(31 DOWNTO 8) WHEN "01000",
	a(6 DOWNTO 0) & a(31 DOWNTO 7) WHEN "00111",
	a(5 DOWNTO 0) & a(31 DOWNTO 6) WHEN "00110",
	a(4 DOWNTO 0) & a(31 DOWNTO 5) WHEN "00101",
	a(3 DOWNTO 0) & a(31 DOWNTO 4) WHEN "00100",
	a(2 DOWNTO 0) & a(31 DOWNTO 3) WHEN "00011",
	a(1 DOWNTO 0) & a(31 DOWNTO 2) WHEN "00010",
	a(0) & a(31 DOWNTO 1) WHEN "00001",
	a WHEN OTHERS;
a_xor<= a_rot XOR b_xor;

process(clr,clk) begin
 if(clr='0') then state <=st_idle;
 elsif(clk'EVENT AND clk='1')then 
 case state is 
 when st_idle      =>if(di_vld='1') then state<=st_pre_round; end if;
 WHEN ST_PRE_ROUND =>  state<=ST_ROUND_OP;
 WHEN ST_ROUND_OP  =>  IF(i_cnt="0001") THEN state<=ST_aft_round;  END IF;
 when ST_aft_round=>   state<= ST_READY;
 WHEN ST_READY     =>   state<=ST_IDLE;
         END CASE;
      END IF;
   END PROCESS;

	PROCESS(clr, clk)  BEGIN
  IF(clr='0') THEN b_reg <=(others=>'0');
    ELSIF(clk'EVENT AND clk='1')then 
      if(state=st_pre_round) then b_reg<=din(31 downto 0);
		  elsif(state=st_round_op)then b_reg<=b_xor; 
         elsif(state=st_aft_round) then b_reg<=b_reg-skey(1);	
		 end if;

  END IF;
END PROCESS;


PROCESS(clr, clk)  BEGIN
  IF(clr='0') THEN a_reg <=(others=>'0');
    ELSIF(clk'EVENT AND clk='1')then 
      if(state=st_pre_round) then a_reg<=din(63 downto 32);
        elsif(state=st_round_op)then a_reg<=a_xor; 
		   elsif(state=st_aft_round) then a_reg<=a_reg-skey(0);	
		 end if;
  END IF;
END PROCESS;

PROCESS(clr, clk)  
BEGIN
  IF(clr='0') THEN 
	i_cnt<="1100";
  ELSIF(clk'EVENT AND clk='1') THEN
     if(state=st_round_op)then 
       IF(i_cnt="0001") THEN
         i_cnt<="1100";
       ELSE
         i_cnt<=i_cnt-'1';
       END IF;
		end if;
    END IF;
END PROCESS;


dout<=a_reg & b_reg;

 WITH state SELECT
 do_rdy<='1' WHEN ST_READY,
		   '0' WHEN others;




end Behavioral;

